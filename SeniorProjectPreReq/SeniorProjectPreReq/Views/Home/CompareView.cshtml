@model SeniorProjectPreReq.Models.CompareViewModel

@{
    ViewBag.Title = "School Comparison";
}

<h2>Compare your schools!</h2>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.bundle.min.js"></script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvvvF5Dprwvrbc3wq5vPED58kn4kSNzE8&callback=initMap">
</script>
<script>
    var geocoder;
    var map;
    var addresses = [];
    var names = [];
    names.push('@Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolName)');
    names.push('@Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolName)');
    names.push('@Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolName)');
    addresses.push("mapOne");
    addresses.push("mapTwo");
    addresses.push("mapThree");
    function codeAddress(id,name) {
        var address = document.getElementById(id + "Address").innerText;
        console.log("address: ", address);
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK') {
                map.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    title: name
                });
                google.maps.event.addListener(marker, 'mouseover', function () {
                    infowindow.open(map, marker);
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
    function initMap() {
        geocoder = new google.maps.Geocoder();
        //test start center 30.3270763,-81.656778,20z
        var uluru = { lat: 30.3270763, lng: -81.656778 };
        map = new google.maps.Map(document.getElementById("mapOne"), {
            zoom: 9,
            center: uluru
        });
        for (var x = 0; x < 3; x++) {
            codeAddress(addresses[x],names[x]);
        }

    }
    $(document).ready(function () {
        initMap
    });
</script>
<script>
    var schoolIDs = []



        function loadCanvas(divID,canvasID) {
        var canvas = document.createElement('canvas');
        div = document.getElementById(divID);
        canvas.id = canvasID;
        canvas.width = 50;
        canvas.height = 50;
        canvas.style.zIndex = 8;
        canvas.style.position = "inline-block";
        canvas.style.border = "1px solid";
        div.appendChild(canvas)
    }
    function drawGridAndCanvases(divID, metrics) {
        for (var x = 0; x < metrics.length; x++){
            var div = document.getElementById(divID);
            console.log(divID)
            var row = document.createElement('div')
            row.classList.add("row");
            console.log(metrics[x], typeof metrics[x])
            if (!(typeof metrics[x] === 'undefined')) {
                    console.log("building canvas")
                    var col = document.createElement('div')
                    col.height = 400;
                    col.width = 400
                    var canvas = document.createElement('canvas');
                    canvas.id = divID + metrics[x] + "C";
                    canvas.width = 300;
                    canvas.height = 300;

                    canvas.style.position = "relative";
                    canvas.style.border = "1px solid";
                    col.appendChild(canvas)
                    row.appendChild(col)
                } else { console.log("undefined") }
            div.appendChild(row)
        }
    }
    $(document).ready(function () {
        schoolIDs.push('@Html.DisplayFor(model => model.schoolOne.generalSchoolData.ID)');
        schoolIDs.push('@Html.DisplayFor(model => model.schoolTwo.generalSchoolData.ID)');
        schoolIDs.push('@Html.DisplayFor(model => model.schoolThree.generalSchoolData.ID)');
        for (var x = 0; x < schoolIDs.length; x++) {
            console.log(x.toString())
            var xhr = $.ajax({
                url: '/API/SchoolsMetrics/' + schoolIDs[x],
                success: function (data) {
                    console.log(data);
                    var metrics = []

                    for (d in data) {
                        if (metrics.indexOf(data[d].MetricName) == -1) {
                            metrics.push(data[d].MetricName)
                        }
                    }
                    drawGridAndCanvases("Metrics" + x.toString(), metrics)
                    for (m in metrics) {
                        var array = []
                        for (p in data) {
                            if (data[p].MetricName == metrics[m]) {
                                array.push(data[p])
                            }
                        }
                        array.sort(function (a, b) {
                            return a.year - b.year;
                        })
                        var years = []
                        var values = []
                        for (y in array) {
                            years.push(array[y].year);
                            values.push(array[y].value);
                        }
                        console.log("years", years);
                        console.log("values", values)

                        console.log(document.getElementById("metricsC"));
                        new Chart(document.getElementById("Metrics" + x.toString() + metrics[m] + "C"), {
                            type: 'bar',
                            data: {
                                labels: years,
                                datasets: [
                                    {
                                        label: metrics[m],
                                        backgroundColor: ["#d32941", "#1d3f5f", "#f5a81e", "#25bad1", "#09a54e"],
                                        data: values,
                                        ticks: {
                                            min: 0
                                        }
                                    }
                                ]
                            },
                            options: {
                                legend: { display: false },
                                responsive: true,
                                maintainAspectRatio: false,
                                title: {
                                    display: true,
                                    text: metrics[m]
                                }
                            }
                        });
                    }


                }
            }); 



            console.log(xhr);
        //ends loop and ready 
        }}); 
    
</script>
<div id="mapOne" style="height: 200px; width: calc(100% + 30px); margin-left: -15px;  margin-right: -15px;"></div>
<div class="row">
    @if (Model.schoolOne != null)
    {
    <div class="col-md-4">
        <div>
          
            <h2>@Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolName)</h2>
            <hr />
            <h4><span class="glyphicon glyphicon-map-marker" aria-hidden="true"></span> <span id="mapOneAddress">@Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolAddress)</span></h4>
            <h4><span class="glyphicon glyphicon-user" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolPrincipal)</h4>
            <h4><span class="glyphicon glyphicon-earphone" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolPhone)</h4>
            <h4><span class="glyphicon glyphicon-globe" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolOne.generalSchoolData.SchoolWebsite)</h4>

            <iframe align="middle" width="360" height="315" src=@Model.schoolOne.schoolVideo frameborder="0" allow="encrypted-media" allowfullscreen></iframe>


            <h4>Metrics</h4>
            <div id="Metrics1">
                <ul class="list-group col-md-6">
                    @if (Model.schoolOne.allMetrics != null)
                    {
                        foreach (var i in Model.schoolOne.allMetrics)
                        {
                            <li class="list-group-item" title="@Html.DisplayFor(model => i.metric.Description)">
                                <span class="badge">@Html.DisplayFor(model => i.value)</span>
                                @Html.DisplayFor(model => i.metric.MetricName)
                            </li>
                        }
                    }
                </ul>
            </div>

            <h4>Programs</h4>
            <ul class="list-group">
                @if (Model.schoolOne.allPrograms != null)
                {
                    foreach (var i in Model.schoolOne.allPrograms)
                    {
                    <li class="list-group-item" title="@Html.DisplayFor(model => i.programDescription)">
                        @Html.DisplayFor(model => i.programName)
                    </li>
                    }
                }
            </ul>

        </div>
    </div>
    }
    else
    {
    <div class="col-md-4"></div>
    }
    @if (Model.schoolTwo != null)
    {
    <div class="col-md-4">
        <div>
            <h2>@Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolName)</h2>
            <hr />
            <h4><span class="glyphicon glyphicon-map-marker" aria-hidden="true"></span> <span id="mapTwoAddress">@Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolAddress)</span></h4>
            <h4><span class="glyphicon glyphicon-user" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolPrincipal)</h4>
            <h4><span class="glyphicon glyphicon-earphone" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolPhone)</h4>
            <h4><span class="glyphicon glyphicon-globe" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolTwo.generalSchoolData.SchoolWebsite)</h4>

            <iframe align="middle" width="360" height="315" src=@Model.schoolTwo.schoolVideo frameborder="0" allow="encrypted-media" allowfullscreen></iframe>

            <h4>Metrics</h4>
            <div id="Metrics2">
                
            </div>

            <h4>Programs</h4>
            <ul class="list-group">
                @if (Model.schoolOne.allPrograms != null)
                {
                    foreach (var i in Model.schoolTwo.allPrograms)
                    {
                        <li class="list-group-item" title="@Html.DisplayFor(model => i.programDescription)">
                            @Html.DisplayFor(model => i.programName)
                        </li>
                    }
                }
            </ul>

        </div>
    </div>
    }
    else
    {
    <div class="col-md-4"></div>
    }
    @if (Model.schoolThree != null)
    {
    <div class="col-md-4">
        <div>
            <h2>@Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolName)</h2>
            <hr />
            <h4><span class="glyphicon glyphicon-map-marker" aria-hidden="true"></span> <span id="mapThreeAddress">@Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolAddress)</span></h4>
            <h4><span class="glyphicon glyphicon-user" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolPrincipal)</h4>
            <h4><span class="glyphicon glyphicon-earphone" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolPhone)</h4>
            <h4><span class="glyphicon glyphicon-globe" aria-hidden="true"></span> @Html.DisplayFor(model => model.schoolThree.generalSchoolData.SchoolWebsite)</h4>

            <iframe align="middle" width="360" height="315" src=@Model.schoolThree.schoolVideo frameborder="0" allow="encrypted-media" allowfullscreen></iframe>

            <h4>Metrics</h4>
            <div id="Metrics3" class="container">
                
            </div>

            <h4>Programs</h4>
            <ul class="list-group">
                @if (Model.schoolOne.allPrograms != null)
                {
                    foreach (var i in Model.schoolThree.allPrograms)
                    {
                    <li class="list-group-item" title="@Html.DisplayFor(model => i.programDescription)">
                        @Html.DisplayFor(model => i.programName)
                    </li>
                    }
                }
            </ul>

        </div>
    </div>
    }
    else
    {
    <div class="col-md-4"></div>
    }
</div>

