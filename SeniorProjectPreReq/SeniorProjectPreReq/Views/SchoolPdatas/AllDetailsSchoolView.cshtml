@model SeniorProjectPreReq.Models.AllDetailsViewModel
@{
    ViewBag.Title = @Model.generalSchoolData.SchoolName + "'s Profile";
}
<script>
    var geocoder; 
    var map; 
    var markers = [];
    function randomColor(id) {
        var colors = ["#07A64E", "#13395E", "#F9B71C", "#33C2DA", "#E62440"];

        min = Math.ceil(0);
        max = Math.floor(5);
        var randomcolor = Math.floor(Math.random() * (max - min)) + min;
        document.getElementById(id).style.backgroundcolor = colors[randomColor];
    }
    function codeAddress() {
        //test address syndney opera hall 
        var testAddress = "Bennelong Point, Sydney NSW 2000, Australia";
        var address = document.getElementById("address").innerText;
        console.log("address: ", address); 
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK') {
                clearMarkers();
                map.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
                markers.push(marker); 
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
    function initMap() {
        geocoder = new google.maps.Geocoder();
        //test start center 30.3270763,-81.656778,20z
        var uluru = { lat: 30.3270763, lng: -81.656778 };
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 9,
            center: uluru
        });
        var marker = new google.maps.Marker({
            position: uluru,
            map: map
        });
        markers.push(marker)
        codeAddress(); 
    }
    function clearMarkers() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers = new Array();
    }
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.bundle.min.js"></script>
<script>
    function loadCanvas(divID,canvasID) {
        var canvas = document.createElement('canvas');
        div = document.getElementById(divID);
        canvas.id = canvasID;
        canvas.width = 50;
        canvas.height = 50;
        canvas.style.zIndex = 8;
        canvas.style.position = "inline-block";
        canvas.style.border = "1px solid";
        div.appendChild(canvas)
    }
    function drawGridAndCanvases(divID, metrics) {
        for (var x = 0; x < metrics.length; x += 3) {
            var div = document.getElementById(divID);
            
            var row = document.createElement('div')
            row.classList.add("row"); 

            for (var i = x; i < x + 3; i++) {
                console.log(metrics[i], typeof metrics[i])
                if (!(typeof metrics[i] === 'undefined')) {
                    console.log("building canvas")
                    var col = document.createElement('div')
                    col.classList.add('col-lg-4')
                    col.height = 400;
                    col.width = 400
                    var canvas = document.createElement('canvas');
                    canvas.id = metrics[i] + "C";
                    canvas.width = 300;
                    canvas.height = 300;

                    canvas.style.position = "relative";
                    canvas.style.border = "1px solid";
                    col.appendChild(canvas)
                    row.appendChild(col)
                } else { console.log("undefined") }
            }
            div.appendChild(row)
        }
    }
    $(document).ready(function () {
       var xhr =  $.ajax({
            url: '/API/SchoolsMetrics/' + @Model.schoolID,
            success: function (data) {
                console.log(data);
                var metrics = []

                for(d in data){
                    if (metrics.indexOf(data[d].MetricName) == -1) {
                        metrics.push(data[d].MetricName)
                    }
                }
                drawGridAndCanvases("metricsC", metrics)
                for (m in metrics) {
                    var array = []
                    for (p in data) {
                        if (data[p].MetricName == metrics[m]) {
                            array.push(data[p])
                        }
                    }
                    array.sort(function (a, b) {
                        return a.year - b.year; 
                    })
                    var years = []
                    var values = []
                    for (y in array) {
                        years.push(array[y].year);
                        values.push(array[y].value);
                    }
                    console.log("years", years);
                    console.log("values", values)
                 
                    console.log(document.getElementById("metricsC"));
                    new Chart(document.getElementById(metrics[m]+"C"), {
                        type: 'bar',
                        data: {
                            labels: years,
                            datasets: [
                                {
                                    label: metrics[m],
                                    backgroundColor: ["#d32941" , "#1d3f5f", "#f5a81e", "#25bad1", "#09a54e"],
                                    data: values,
                                    ticks: {
                                        min: 0
                                    }
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            responsive: true,
                            maintainAspectRatio: false,
                            title: {
                                display: true,
                                text: metrics[m]
                            }
                        }
                    });
                }
                
            }
        });
       console.log(xhr); 
    })
</script>
<style>
    .databoxmetric {
        background-color: #13395E;
        width: 150px;
        height: 200px;
        border: 2px blue;
        margin: 10px;
        padding: 20px 0;
        text-align: center;
        font-size: 20px;
    }
    .databoxprogram {
        background-color: #E62440;
        width: 200px;
        height: 200px;
        border: 2px blue;
        margin: 10px;
        padding: 10px 0;
        text-align: center;
        font-size: 20px;
    }
    .header {
        font-size: 14px;
        color: white;
        margin: 10px;
        padding: 10px 0;
        text-align: left;
        height:28px;
    }

    .content {
        font-size: 30px;
        color: white;
        padding: 50px 0px;
        margin: auto;
    }
</style>
<h4></h4>
<div>
    <div>

        <div class="row">
            <div class="col-lg-4" style="background-color: white; height: 500px">
                <div id="map" style="height: 200px; width: calc(100% + 30px); margin-left: -15px;  margin-right: -15px;"></div>
                <h2>@Html.DisplayFor(model => model.generalSchoolData.SchoolName)</h2>
                <hr />
                <h4><span class="glyphicon glyphicon-map-marker" aria-hidden="true"></span> <span id="address">@Html.DisplayFor(model => model.generalSchoolData.SchoolAddress)</span></h4>
                <h4><span class="glyphicon glyphicon-user" aria-hidden="true"></span> @Html.DisplayFor(model => model.generalSchoolData.SchoolPrincipal)</h4>
                <h4><span class="glyphicon glyphicon-earphone" aria-hidden="true"></span> @Html.DisplayFor(model => model.generalSchoolData.SchoolPhone)</h4>
                <h4><span class="glyphicon glyphicon-globe" aria-hidden="true"></span> @Html.DisplayFor(model => model.generalSchoolData.SchoolWebsite)</h4>

            </div>
            <div class="col-lg-8">
                @if (Model.schoolVideo != null)
                {

                    <iframe align="middle" width="100%" height="500" src="@Model.schoolVideo" frameborder="0" allow="encrypted - media" allowfullscreen></iframe>
                }
                else
                {

                    <img style="width: 100%; height: 500px;" src="@Url.Content("~/Content/img/classroom.jpg")">
                }




            </div>
        </div>
    </div>
</div>



        
   


    <h1>Metrics</h1>
    @*<div class="container">
        <ul class="list-group col-md-6">
            @foreach (var i in Model.allMetrics)
            {
                <li class="list-group-item" title="@Html.DisplayFor(model => i.metric.Description)">
                    <span class="badge">@Html.DisplayFor(model => i.value)</span>
                    @Html.DisplayFor(model => i.metric.MetricName)
                </li>
            }
        </ul>
    </div>*@
    <div id="metricsC">

    </div>
<div>
    <h1>Programs</h1>

    <div class="row">
        @foreach (var i in Model.allPrograms)
        {
            <div class="databoxprogram col-lg-2" title="@Html.DisplayFor(model => i.programDescription)">
                <div class="content">@Html.DisplayFor(model => i.programName)</div>
            </div>
        }
    </div>

</div>

@if (User.IsInRole("Administrator"))
{
    <br />
    <div>
        @Html.ActionLink("Back to List", "Index", "SchoolPDatas")
    </div>
}
else
{
    <br />
    <div>
        @Html.ActionLink("Back to Home", "Index", "Home")
    </div>
}
<!-- TIMS GOOGLE API DO NOT ALLOW INTO PRODUCTION TIM DOES NOT WANT A BILL-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvvvF5Dprwvrbc3wq5vPED58kn4kSNzE8&callback=initMap">
</script>
